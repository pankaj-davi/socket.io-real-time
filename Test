const pattern = /(?:\b(?:\w*SSO|\w*Single Sign-On)\b.*?\b\d{9}\b|\b\d{9}\b.*?\b(?:\w*SSO|\w*Single Sign-On)\b|\d{3}-\d{2}-\d{4}.*?\b(?:\w*SSO|\w*Single Sign-On)\b|\b(?:\w*SSO|\w*Single Sign-On)\b.*?\d{3}-\d{2}-\d{4})/gi;
const pattern = /(?:\b(?:credit card|cc|card #)\b.*?(?:\d{4}[-\s]?){3}\d{4}|\b(?:\d{4}[-\s]?){3}\d{4}\b.*?(?:credit card|cc|card #)\b|\b(?:credit card|cc|card #)\b.*?(?:\d{4}[-\s]?){3}\d{4})/gi;

// Example array
const example = [
    "123456789 is my.", 
    "My mSingle Sign-On  number is 987654321.", 
    ": 111223333 is required for processing. sso", 
    "The number 555-66-7788 is my Single Sign-On.", 
    "Can I have your SSO? It's 444556666.", 
    "I need to verify the single sign-On sso 222334455.", 
    "Your SSO number is 333445666.", 
    "Please provide your Single Sign-On: 777889900 for verification.", 
    "Is 999001234 my SSO number?", 
    "My Single Sign-On number is 123-45-6789.", 
    "For security, enter your sso 123456789.", 
    "Your Single Sign-On code is 246-80-3579.", 
    "I have my SSO number, which is 123456789.", 
    "The required Single Sign-On is: 987-65-4321.", 
    "The SSO for John Doe is 321654987.", 
    "To complete registration, please enter your SSO: 135792468.", 
    "Don't forget your Single Sign-On: 654321987 for access.", 
    "Your sso code is: 147258369.", 
    "The current SSO is 456789012.", 
    "Use this SSO 789456123 for login.", 
    "The SSO code is 258369147.", 
    "To verify, enter your SSO: 369258147.", 
    "Please enter your SSO number: 852741963.", 
    "Can you confirm your SSO 963852741?", 
    "What is your SSO: 147258369?", 
    "Your SSO should be 258159753.", 
    "For access, my SSO is: 789654123.", 
    "Your Single Sign-On (SSO) is: 852456963.", 
    "The SSO you provided is: 951-75-3852.", 
    "Can you confirm my SSO is 321987654?", 
    "Please verify your SSO: 456123789.", 
    "To access your account, enter SSO: 789321654.", 
    "For help, your mySSO code is 987-12-3456.", 
    " is: 456-98-7321. My SSO number",
    "Is 1234567891234567 my credit card number?", // Valid
    "Please provide the credit card number 1234 5678 9012 3456.", // Valid
    "Your card # 9876 5432 1234 5678 is active1.", // Valid
    "Use my credit card # 4444 3333 2222 1111 for payment.", // Valid
    "credit card number I need my : 1234-5678-9012-3456.", // Valid
    "My card # 1234567891234567 was just processed.", // Valid
    "The cc number: 4567 8910 1112 1314 is pending.", // Valid
    "This credit card number 1234-4321-8765-5678 is not valid.", // Valid
    "I lost my card # 6789 0123 4567 8901!", // Valid
    "Credit card # 7890-1234-5678-9012 is my backup.", // Valid
    "Please provide the cc number 2222-3333-4444-5555.", // Valid
    "The number 1111222233334444 is a credit card number.", // Valid
    "Check my credit card # 3333 4444 5555 6666, please.", // Valid
    "I have a cc number 4567-8901-2345-6789 as well.", // Valid
    "Is it true that 1234567812345678 is my credit card number?", // Valid
];

example.forEach((item) => {
    const matches = item.match(pattern);
    if (!matches) {
        console.log(`${item}`);
    } 
});

function checkKeywordsWithinWindow(text, keywordsAndPatterns, windowLength) {
    // Convert the window length to the number of characters on each side (half the window)
    let halfWindow = Math.floor(windowLength / 2);

    // Loop through each keyword and pattern object
    for (let { keywords, pattern } of keywordsAndPatterns) {
        // Loop through each keyword
        for (let keyword of keywords) {
            // Regular expression to find the keyword
            let regexKeyword = new RegExp(`.{0,${halfWindow}}(${keyword}).{0,${halfWindow}}`, 'gi');

            // Find all occurrences of the keyword
            let match;
            while ((match = regexKeyword.exec(text)) !== null) {
                let start = Math.max(0, match.index - halfWindow);
                let end = Math.min(text.length, match.index + keyword.length + halfWindow);
                
                let windowText = text.substring(start, end);

                // Check if the corresponding pattern appears in the same window as the keyword
                if (pattern.test(windowText)) {
                    console.error(`Error: Both "${keyword}" and a 3- or 4-digit number found within ${windowLength} characters.`);
                    return true;  // Error found
                }
            }
        }
    }

    console.error(`No Error found`);  // No error found
    return false;  // No error found
}

// Example: Array containing multiple objects with keywords and regex patterns
let keywordsAndPatterns = [
    {
        keywords: ["test", "test code", "credit", "card #"], 
        pattern: /\b\d{3,4}\b/ // Match 3 or 4 digit numbers
    },
    {
        keywords: ["ccv", "cvv code", "card"], 
        pattern: /\b\d{3,4}\b/ // Match 3 or 4 digit numbers
    }
];

// Input text
let inputText = "Lorem Ipsum is simply dummy text of the printing and typesetting industry.321 Lorem Ipsum ccv has been the industry's standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged. It was popularised in the 1960s with the release of Letraset sheets containing Lorem Ipsum passages, and more recently with desktop publishing software like Aldus PageMaker including versions of Lorem Ipsum 357.";

// Call the function to check for multiple keywords and patterns within 100 characters
checkKeywordsWithinWindow(inputText, keywordsAndPatterns, 100);

