function validatePassport(passportNumber) {
    // Define regex patterns for different countries
    const patterns = {
        "US": /^(?!^0+$)[0-9]{9}$/,                          // 9 digits, cannot be all zeros
        "UK": /^[A-Z]{1}[0-9]{7}[A-Z]{1}$/,                   // 1 letter, 7 digits, 1 letter
        "DE": /^[A-Z0-9]{9}$/,                                 // 9 alphanumeric characters
        "IN": /^[A-Z]{1}[0-9]{7}$/,                           // 1 letter followed by 7 digits
        "CA": /^[A-Z]{2}[0-9]{6}$/,                           // 2 letters followed by 6 digits
        "AU": /^[A-Z]{1}[0-9]{7}$/,                           // 1 letter followed by 7 digits
        "FR": /^[0-9]{2}[A-Z]{2}[0-9]{5}$/,                   // 2 digits, 2 letters, 5 digits
        "IT": /^[A-Z0-9]{9}$/,                                 // 9 alphanumeric characters
        "JP": /^[A-Z0-9]{9}$/,                                 // 9 alphanumeric characters
        "BR": /^[0-9]{8}$/,                                    // 8 digits
        "MX": /^[A-Z0-9]{9}$/,                                 // 9 characters (1 letter, 8 digits)
        "ZA": /^[A-Z]{1}[0-9]{7}$/,                           // 1 letter followed by 7 digits
        "CN": /^[A-Z][0-9]{8}$/,                              // 1 letter followed by 8 digits
        "RU": /^[0-9]{9}$/,                                   // 9 digits
        "ES": /^[A-Z]{1}[0-9]{7}[A-Z]{1}$/,                    // 1 letter, 7 digits, 1 letter
        "TR": /^[A-Z0-9]{9}$/,                                 // 9 alphanumeric characters
        "AR": /^[0-9]{8}$/,                                    // 8 digits
        "CO": /^[0-9]{10}$/,                                   // 10 digits
        "PH": /^[A-Z0-9]{9}$/,                                 // 9 characters
        "ID": /^[A-Z]{1}[0-9]{7}$/,                            // 1 letter followed by 7 digits
        "MY": /^[A-Z]{1}[0-9]{8}$/,                            // 1 letter followed by 8 digits
        "SG": /^[A-Z]{1}[0-9]{7}$/,                            // 1 letter followed by 7 digits
        // Add more countries and patterns as needed
    };

    // Check if the passport number matches any country's pattern
    for (const [country, pattern] of Object.entries(patterns)) {
        if (pattern.test(passportNumber)) {
            throw new Error(`Error: The passport number '${passportNumber}' matches the format of country: ${country}.`);
        }
    }

    // If no matches were found, the passport number is considered valid (or non-conflicting)
    return true;
}

// Example usage
const passportNumbers = [
    "123456789",   // US valid (should throw an error)
    "A1234567B",   // UK valid (should throw an error)
    "C01A23456",   // DE valid (should throw an error)
    "A1234567",    // IN valid (should throw an error)
    "AB123456",    // CA valid (should throw an error)
    "INVALID123",  // Invalid passport (should not throw an error)
    "A12345678",   // AU valid (should throw an error)
];

passportNumbers.forEach(passportNumber => {
    try {
        validatePassport(passportNumber);
        console.log(`The passport number '${passportNumber}' is valid (not matching any country).`);
    } catch (error) {
        console.error(error.message);
    }
});
